import torch
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from torchvision.datasets import ImageFolder
from pytorch_fid import fid_score
import os

# Download the pre-trained Inception v3 model and set it to evaluation mode
inception_model = torch.hub.load('pytorch/vision:v0.10.0', 'inception_v3', pretrained=True)
inception_model.eval()

# Define the transformations to be applied to the images
transform = transforms.Compose([
    transforms.Resize((299, 299)),  # Resize the image to 299x299
    transforms.ToTensor(),  # Convert the image to a PyTorch tensor
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5]),  # Normalize the image
])

# Load the test images for Monet's paintings and photos
test_monet = ImageFolder("test_monet", transform=transform)
test_photo = ImageFolder("test_photo", transform=transform)

# Load the output images generated by the GAN and NST models
GAN_out = ImageFolder("GAN_out", transform=transform)
NST_out = ImageFolder("NST_out", transform=transform)

# Define the data loaders for the test sets and output sets
test_loader_monet = DataLoader(test_monet, batch_size=64, shuffle=False)
test_loader_photo = DataLoader(test_photo, batch_size=64, shuffle=False)
GAN_loader = DataLoader(GAN_out, batch_size=64, shuffle=False)
NST_loader = DataLoader(NST_out, batch_size=64, shuffle=False)

# Calculate the FID score for GAN
fid_GAN = fid_score.calculate_fid_given_paths(
    [test_loader_photo, GAN_loader],
    inception_model,
    device='cuda' if torch.cuda.is_available() else 'cpu'
)
print(f"FID score for GAN: {fid_GAN}")

# Calculate the FID score for NST
fid_NST = fid_score.calculate_fid_given_paths(
    [test_loader_photo, NST_loader],
    inception_model,
    device='cuda' if torch.cuda.is_available() else 'cpu'
)
print(f"FID score for NST: {fid_NST}")
